package com.nea.nehe.lesson06;

import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;

import javax.microedition.khronos.opengles.GL10;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.BitmapFactory;
import android.opengl.GLUtils;

/**
 * This class is an object representation of 
 * a Cube containing the vertex information,
 * texture coordinates, the vertex indices
 * and drawing functionality, which is called 
 * by the renderer.
 * 
 * @author Savas Ziplies (nea/INsanityDesign)
 */
public class GLGraphic {

	Bitmap bitmap = null;
	/** The buffer holding the vertices */
	private FloatBuffer vertexBuffer;
	/** The buffer holding the texture coordinates */
	private FloatBuffer textureBuffer;
	/** The buffer holding the indices */
	private ByteBuffer indexBuffer;
	
	private int frame = 1;
	private int maxFrames = 38

	/** Our texture pointer */
	private int[] textures = new int[1];

	/** 
	 * The initial vertex definition
	 * 
	 * Note that each face is defined, even
	 * if indices are available, because
	 * of the texturing we want to achieve 
	 */	
    private float vertices[] = {
    					//Vertices according to faces
			    		-1.0f, -1.0f, 1.0f, //Vertex 0
			    		1.0f, -1.0f, 1.0f,  //v1
			    		-1.0f, 1.0f, 1.0f,  //v2
			    		1.0f, 1.0f, 1.0f,   //v3
											};
            
    /** The initial indices definition */	
    private byte indices[] = {
    					//Faces definition
			    		0,1,3, 0,3,2, 			//Face front
    										};

    /*
	g.drawImage(m_imImage, 
			(int)m_rcBoundingBox.x, 
			(int)m_rcBoundingBox.y, 
			(int)(m_rcBoundingBox.x + m_rcBoundingBox.width), 
			(int)(m_rcBoundingBox.y + m_rcBoundingBox.height),
			
			(int)(1), 
			(int)(1 + (m_rcBoundingBox.height * m_iFrame) + m_iFrame), 
			(int)(1 + m_rcBoundingBox.width),
			(int)((m_rcBoundingBox.height+1)*(m_iFrame+1)),
	
			 null, null);
	*/
    
    //X = 1
    //Y = 1 + (height * frame) + frame
    //Width = 1 + width
    //Height = (height + 1) * (frame + 1)
	
	/**
	 * The Cube constructor.
	 * 
	 * Initiate the buffers.
	 */
	public GLGraphic(GL10 gl, InputStream is) {		
		loadGLTexture(gl, is);
	}

	/**
	 * The object own drawing function.
	 * Called from the renderer to redraw this instance
	 * with possible changes in values.
	 * 
	 * @param gl - The GL Context
	 */
	public void draw(GL10 gl) {
		

		int width = 32;
		int height = 32;
		

		
		int pixels [] = new int[width*height];
		
		
		int yStart = (int)(1 + (height * frame) + frame);
		frame++;
		if (frame >= maxFrames)
		{
			frame = 0;
		}
		
		bitmap.getPixels(pixels, 0, 32, 1, yStart, 32, 32);
		Bitmap bitmap2 = Bitmap.createBitmap(pixels, 32, 32, Bitmap.Config.ARGB_8888);
		//Use the Android GLUtils to specify a two-dimensional texture image from our bitmap
		GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, bitmap2, 0);
				
				
		ByteBuffer byteBuf = ByteBuffer.allocateDirect(vertices.length * 4);
		byteBuf.order(ByteOrder.nativeOrder());
		vertexBuffer = byteBuf.asFloatBuffer();
		vertexBuffer.put(vertices);
		vertexBuffer.position(0);

		//
		indexBuffer = ByteBuffer.allocateDirect(indices.length);
		indexBuffer.put(indices);
		indexBuffer.position(0);
		
		//x,width,y,height
		int testBox [] = {1,33,1,33};

	    /** The initial texture coordinates (u, v) */	
	    /*float texture[] = {    		
				    		//Mapping coordinates for the vertices
				    		(float)(testBox[0]/width), (float)(testBox[2]/height),
				    		(float)(testBox[0]/width), (float)(testBox[3]/height),
				    		(float)(testBox[1]/width), (float)(testBox[2]/height),
				    		(float)(testBox[1]/width), (float)(testBox[3]/height) 
				    							};
				    							*/
		float texture[] = {	
					0.0f, 0.0f,
					0.0f, 1.0f,
					1.0f, 0.0f,
					1.0f, 1.0f
		};		
				   
	    
		System.out.println(width + "/" + height);
	    System.out.println(texture[0]+","+texture[1]+","+texture[2]+","+texture[3]+","+texture[4]+","+texture[5]+","+texture[6]+","+texture[7]);
	    
		//
		byteBuf = ByteBuffer.allocateDirect(texture.length * 4);
		byteBuf.order(ByteOrder.nativeOrder());
		textureBuffer = byteBuf.asFloatBuffer();
		textureBuffer.put(texture);
		textureBuffer.position(0);
	    
		//Bind our only previously generated texture in this case
		gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
		
		
		
		//Point to our buffers
		gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
		gl.glEnableClientState(GL10.GL_TEXTURE_COORD_ARRAY);

		//Set the face rotation
		gl.glFrontFace(GL10.GL_CCW);
		
		//Enable the vertex and texture state
		gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
		gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, textureBuffer);
		
		//Draw the vertices as triangles, based on the Index Buffer information
		gl.glDrawElements(GL10.GL_TRIANGLES, indices.length, GL10.GL_UNSIGNED_BYTE, indexBuffer);
		
		//Disable the client state before leaving
		gl.glDisableClientState(GL10.GL_VERTEX_ARRAY);
		gl.glDisableClientState(GL10.GL_TEXTURE_COORD_ARRAY);
	}
	
	/**
	 * Load the textures
	 * 
	 * @param gl - The GL Context
	 * @param context - The Activity context
	 */
	public void loadGLTexture(GL10 gl, InputStream is) {
		//Get the texture from the Android resource directory
		
		try {
			//BitmapFactory is an Android graphics utility for images
			bitmap = BitmapFactory.decodeStream(is);
		} finally {
			//Always clear and close
			try {
				is.close();
				is = null;
			} catch (IOException e) {
			}
		}

		//Generate one texture pointer...
		gl.glGenTextures(1, textures, 0);
		//...and bind it to our array
		gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
		
		//Create Nearest Filtered Texture
		gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
		gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);

		//Different possible texture parameters, e.g. GL10.GL_CLAMP_TO_EDGE
		gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_WRAP_S, GL10.GL_CLAMP_TO_EDGE);
		gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_WRAP_T, GL10.GL_CLAMP_TO_EDGE);
		

	}
}
