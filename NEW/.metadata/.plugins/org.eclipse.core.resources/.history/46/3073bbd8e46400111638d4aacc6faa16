package com.spacecombat;

import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;

public class GameObject extends Component 
{
	private static List<GameObject> gameObjects = new ArrayList<GameObject>();
	
	public Transform transform;
	
	private float destroyTimeStamp;
	//
	private RigidBody rigidBody;
	private String name = "GameObject";
	private String [] tags;
	private boolean isDestroyed = false;
	private boolean isDestroying = false;

	private List<Component> components;
	
	public GameObject ()
	{
		name = "GameObject";
		tags = new String [] {};
		transform = new Transform();
		components = new LinkedList<Component>();
	}
	
	public void setName (String name)
	{
		this.name = name;
	}
	
	public String getName ()
	{
		return name;
	}

	public void setTags (String [] tags)
	{
		this.tags = tags;
	}
	
	public String [] getTags ()
	{
		return tags;
	}
	
	public boolean hasTag (String tag)
	{
		if (tags == null)
		{
			return false;
		}
		if (tag == null)
		{
			return false;
		}
		
		int x = 0;
		for (x = 0; x < tags.length; x++)
		{
			if (tags[x].equalsIgnoreCase(tag))
			{
				return true;
			}
		}
		
		return false;
	}
	
	public boolean hasTag (String [] otherTags)
	{
		if (tags == null)
		{
			return false;
		}
		if (otherTags == null)
		{
			return false;
		}
		
		int x = 0;
		for (x = 0; x < tags.length; x++)
		{
			int y = 0;
			for (y = 0; y < otherTags.length; y++)
			{
				if (tags[x].equalsIgnoreCase(otherTags[y]) && otherTags[y] != null)
				{
					return true;
				}
			}
		}
		
		return false;
	}

	public String getPrintableTags ()
	{
		String s = "";
		if (tags != null)
		{
			int x = 0;
			for (x = 0; x < tags.length; x++)
			{
				s += tags[x]+",";
			}
		}
		return s;
	}
	public void setRigidBody(RigidBody rigidBody)
	{
		//System.out.println("Created RigidBody:"+rigidBody);
		rigidBody.setGameObject(this);
		this.rigidBody = rigidBody;
		rigidBody.setGameObject(this);	
	}
	
	public RigidBody getRigidBody()
	{
		return rigidBody;
	}
	
	public void addComponent(Component c)
	{
		c.setGameObject(this);
		//System.out.println("Added:" + c.getClass().getSimpleName());
		components.add(c);		
	}
	
	public Component getComponent(Class<? extends Component> getClass)
	{			
		//String s = "";
		int x = 0;
		for (x = 0; x < components.size(); x++)
		{
			//s += c.getClass().getSimpleName() + ",";
			
			if (components.get(x).getClass() == getClass)
			{
				//System.out.println(getName() + " found " + getClass.getSimpleName());
				return components.get(x);
			}
		}
		
		//System.out.println(getName() + " did not find " + getClass.getSimpleName() + " in " + s);
		return null;
	}
	
	public void removeComponent (Component c)
	{
		components.remove(c);
	}
	
	public void removeComponent(Class<? extends Component> getClass)
	{			
		int x = 0;
		for (x = 0; x < components.size(); x++)
		{
			if (components.get(x).getClass() == getClass)
			{
				components.remove(components.get(x));
				return;
			}
				
		}
	}
	
	public void collide (Collision collision)
	{
		if (isDestroyed)
		{
			return;
		}
		
		for (int x = 0; x < components.size(); x++)
		{
			components.get(x).collide(collision);
		}
	}
	
	public void draw ()
	{
		if (isDestroyed)
		{
			return;
		}
				
		if (rigidBody != null)
		{
			rigidBody.draw();
		}
		
		for (int x = 0; x < components.size(); x++)
		{
			if (components.get(x).isEnabled())
			{
				components.get(x).draw();
			}
		}		
	}

	public void onCreate ()
	{
		if (rigidBody != null)
		{
			rigidBody.onCreate();
		}
			
		int x = 0;
		for (x = 0; x < components.size(); x++)
		{
			components.get(x).onCreate();
		}
	}
	
	public void onStart ()
	{
		if (rigidBody != null)
		{
			rigidBody.onStart();
		}
		
		int x = 0;
		for (x = 0; x < components.size(); x++)
		{
			components.get(x).onStart();
		}
	}
	
	public void update ()
	{
		if (isDestroyed)
		{
			return;
		}		
		
		//technically should happen somewhereElse
		if (rigidBody != null)
		{
			//System.out.println("Updating RigidBody");
			rigidBody.update();
		}
				
		for (int x = 0; x < components.size(); x++)
		{
			if (components.get(x).isEnabled())
			{
				//System.out.println("Updating:" + c.getClass().getSimpleName());
				components.get(x).update();
			}
		}
		
		if (isDestroying)
		{
			if (destroyTimeStamp < Time.getTime())
			{
				destroy();
			}
		}
	}
	
	public void destroy ()
	{
		int x = 0;
		
		for (x = 0; x < components.size(); x++)
		{
			components.get(x).onBeforeDestroy();
		}
		
		isDestroyed = true;
		//System.out.println("destroyed " + getName());		
	}
	
	public void destroyAfter (float time)
	{
		destroyTimeStamp = Time.getTime();

		destroyTimeStamp += time;
		isDestroying = true;
	}
	
	public boolean isDestroyed ()
	{
		return isDestroyed;	
	}
	
	public GraphicAnimation getCurrentAnimation ()
	{
		int x = 0;
		for (x = 0; x < components.size(); x++)
		{
			if (components.get(x) instanceof GraphicAnimation)
			{
				if (components.get(x).isEnabled())
				{
					return (GraphicAnimation)components.get(x);
				}
			}
		}
		return null;
	}
	
	public GraphicAnimation playAnimation (String name)
	{
		GraphicAnimation animation = null;
		
		int x = 0;
		for (x = 0; x < components.size(); x++)
		{
			if (components.get(x) instanceof GraphicAnimation)
			{
				GraphicAnimation gl = (GraphicAnimation)components.get(x);
				
				if (gl.getName().equals(name))
				{
					System.out.println("Playing " + name);
					gl.setEnabled(true);
					animation = gl;
				}
				else
				{
					gl.setEnabled(false);
				}
			}
		}
		
		return animation;
	}
	
	public GraphicAnimation getAnimation (String name)
	{
		int x = 0;
		for (x = 0; x < components.size(); x++)
		{
			if (components.get(x) instanceof GraphicAnimation)
			{
				if (((GraphicAnimation)components.get(x)).getName().equals(name))
				{
					return (GraphicAnimation)components.get(x);
				}
			}

		}
		return null;
	}
	
	public static List<GameObject> getAllGameObjects ()
	{
		return gameObjects;
	}
	
	public static GameObject findByName (String search)
	{	
		int x = 0;
		for (x = 0; x < gameObjects.size(); x++)
		{
			if (gameObjects.get(x).getName().equals(search))
			{
				return gameObjects.get(x);
			}
		}
		return null;
	}
	
	public static List<GameObject> findAllByName (String search)
	{		
		LinkedList<GameObject> gos = new LinkedList<GameObject>();
		int x = 0;
		for (x = 0; x < gameObjects.size(); x++)
		{
			if (gameObjects.get(x).getName().equals(search))
			{
				gos.add(gameObjects.get(x));
			}
		}
		return gos;
	}
	
	public static List<GameObject> findAllByTags (String [] search)
	{
		LinkedList<GameObject> gos = new LinkedList<GameObject>();
		int x = 0;
		for (x = 0; x < gameObjects.size(); x++)
		{
			if (gameObjects.get(x).hasTag(search))
			{
				gos.add(gameObjects.get(x));
			}
		}
		return gos;
	}
	
	public static void executeOnAllWithTags (String [] search, Function f)
	{
		int x = 0;
		for (x = 0; x < gameObjects.size(); x++)
		{
			if (gameObjects.get(x).hasTag(search))
			{
				f.execute(gameObjects.get(x));
			}
		}
	}
	
	public static void create (GameObject gameObject)
	{		
		gameObjects.add(gameObject);
		//System.out.println("created " + gameObject.getName());		
		gameObject.onCreate();
		gameObject.onStart();
	}

}
