package com.spacecombat;

import java.io.IOException;

import java.io.InputStream;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;

import javax.microedition.khronos.opengles.GL10;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.opengl.GLUtils;
import java.util.HashMap;

/**
 * This class is an object representation of 
 * a Cube containing the vertex information,
 * texture coordinates, the vertex indices
 * and drawing functionality, which is called 
 * by the renderer.
 * 
 * @author Savas Ziplies (nea/INsanityDesign)
 */

public class GLGraphic implements GenericGraphic 
{
	private static HashMap<String,int []> loaded;
	
	private String name;
	private static GL10 gl;
	
	/** The buffer holding the vertices */
	private FloatBuffer vertexBuffer;
	/** The buffer holding the texture coordinates */
	private FloatBuffer textureBuffer;
	/** The buffer holding the indices */
	private ByteBuffer indexBuffer;
	
	/** Our texture pointer */
	private int[] textures = new int[1];
	
	private int maxWidth = 1;
	private int maxHeight = 1;

	/** 
	 * The initial vertex definition
	 * 
	 * Note that each face is defined, even
	 * if indices are available, because
	 * of the texturing we want to achieve 
	 */	
    private float vertices[];
    private float texture[];    		
        
    /** The initial indices definition */	
    private static byte indices[] = {0,1,3, 0,3,2};

    
	/**
	 * The Cube constructor.
	 * 
	 * Initiate the buffers.
	 */
    public static void setGl (GL10 gl)
    {
    	GLGraphic.gl = gl;
    }
    
	public GLGraphic(String name, InputStream is) {
		this.gl = gl;

		if (loaded == null)
		{
			System.out.println("CREATED NEW IMAGE ARRAY");
			loaded = new HashMap<String,int []>();
		}
		
		this.name = name;
		loadGLTexture(name,is);
		vertices = new float [] 
							 {0.0f,0.0f,0.0f,
							  0.0f,0.0f,0.0f,
							  0.0f,0.0f,0.0f,
							  0.0f,0.0f,0.0f};
		texture = new float [8];
		
		ByteBuffer byteBuf = ByteBuffer.allocateDirect(vertices.length * 4);
		byteBuf.order(ByteOrder.nativeOrder());
		vertexBuffer = byteBuf.asFloatBuffer();
		
		byteBuf = ByteBuffer.allocateDirect(texture.length * 4);
		byteBuf.order(ByteOrder.nativeOrder());
		textureBuffer = byteBuf.asFloatBuffer();

		indexBuffer = ByteBuffer.allocateDirect(indices.length);
	}

	public GL10 getGL ()
	{
		return this.gl;
	}
	
	public int getWidth ()
	{
		return maxWidth;	
	}
	
	public int getHeight ()
	{
		return maxHeight;
	}
	
	/**
	 * 
	 * The object own drawing function.
	 * Called from the renderer to redraw this instance
	 * with possible changes in values.
	 * 
	 * @param gl - The GL Context
	 */
	public void draw(int x, int y, int width, int height, int offsetX, int offsetY, int rotx, int roty, int scalex, int scaley) {
				
		int originalX = x;
		int originalY = y;
		int originalWidth = width;
		int originalHeight = height;

		x+=0;
		y+=0;
		width-=0;
		height-=1;

		
		float newX = (float)x / (float)maxWidth;
		float newY = (float)y / (float)maxHeight;
		float newWidth = ((float)x + (float)width)/(float)maxWidth;
		float newHeight = ((float)y + (float)height)/(float)maxHeight;
				

		//if the division ends up mapping into a border, cut it off		
		if (Math.round(newX*(float)maxWidth) < originalX)
		{
			x++;
			newX = (float)x / (float)maxWidth;
		}
			
		if (Math.round(newY*(float)maxHeight) < originalY)
		{
			y++;
			newY = (float)y / (float)maxHeight;
		}
		
		if (Math.round(newWidth*(float)maxWidth) > originalX + originalWidth)
		{
			width--;
			newWidth = ((float)originalX + (float)width) / (float)maxWidth;
		}

		if (Math.round(newHeight*(float)maxHeight) > originalY + originalHeight)
		{
			height--;
			newHeight = ((float)originalY + (float)height) / (float)maxHeight;
		}


	    /** The initial texture coordinates (u, v) */
		/*
		float texture[] = {    		
	    		//Mapping coordinates for the vertices
	    		newX, newY,
	    		newX, newHeight,
	    		newWidth, newY,
	    		newWidth, newHeight 
	    							};	    							*/
		texture[0] = newX;
		texture[1] = newY;
		texture[2] = newX;
		texture[3] = newHeight;
		texture[4] = newWidth;
		texture[5] = newY;
		texture[6] = newWidth;
		texture[7] = newHeight;
		/*
		vertices = new float [] {
	    		-0.0f, 0.0f, 0.0f,
	    		width, 0.0f, 0.0f,
	    		-0.0f, height, 0.0f,
	    		width, height, 0.0f,
									};
									*/
		
		//this is more efficient than the above
		vertices[0] = 0.0f;
		vertices[1] = 0.0f;
		vertices[2] = 0.0f;
		
		vertices[3] = width;
		vertices[4] = 0.0f;
		vertices[5] = 0.0f;
		
		vertices[6] = 0.0f;
		vertices[7] = height;
		vertices[8] = 0.0f;
		
		vertices[9] = width;
		vertices[10] = height;
		vertices[11] = 0.0f;
		
		//Bind our only previously generated texture in this case

		/*
		ByteBuffer byteBuf = ByteBuffer.allocateDirect(vertices.length * 4);
		byteBuf.order(ByteOrder.nativeOrder());
		vertexBuffer = byteBuf.asFloatBuffer();
		 */
		vertexBuffer.clear();
		vertexBuffer.put(vertices);
		vertexBuffer.position(0);

		textureBuffer.clear();
		textureBuffer.put(texture);
		textureBuffer.position(0);

		//
		
		indexBuffer.clear();
		indexBuffer.put(indices);
		indexBuffer.position(0);
				
		gl.glTranslatef(offsetX,offsetY,0);
		gl.glRotatef(-90.0f, 0.0f, 0.0f, 1.0f);	//X
		
		//gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
		gl.glBindTexture(GL10.GL_TEXTURE_2D, loaded.get(name)[0]);
		
		//Point to our buffers
		gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
		gl.glEnableClientState(GL10.GL_TEXTURE_COORD_ARRAY);

		//Set the face rotation
		gl.glFrontFace(GL10.GL_CCW);
		
		//Enable the vertex and texture state
		gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
		gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, textureBuffer);
		
		//Draw the vertices as triangles, based on the Index Buffer information
		gl.glDrawElements(GL10.GL_TRIANGLES, indices.length, GL10.GL_UNSIGNED_BYTE, indexBuffer);
		
		//Disable the client state before leaving
		gl.glDisableClientState(GL10.GL_VERTEX_ARRAY);
		gl.glDisableClientState(GL10.GL_TEXTURE_COORD_ARRAY);
		gl.glRotatef(90.0f, 0.0f, 0.0f, 1.0f);	//X
		gl.glTranslatef(-offsetX,-offsetY,0);
	}
	
	/**
	 * Load the textures
	 * 
	 * @param gl - The GL Context
	 * @param context - The Activity context
	 */
	public void loadGLTexture(String name, InputStream is) {
		//Get the texture from the Android resource directory			
		
		if (loaded.containsKey(name))
		{
			int [] temp = loaded.get(name);
			maxHeight = temp[1];
			maxWidth = temp[2];
			//
			return;
		}
		
		Bitmap bitmap = null;
		try {
			//BitmapFactory is an Android graphics utility for images
			bitmap = BitmapFactory.decodeStream(is);
		} finally {
			//Always clear and close
			try {
				is.close();
				is = null;
			} catch (IOException e) {
			}
		}

		//Generate one texture pointer...
		gl.glGenTextures(1, textures, 0);
		//...and bind it to our array
		gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
		
		//Create Nearest Filtered Texture
		gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
		gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_NEAREST);

		//Different possible texture parameters, e.g. GL10.GL_CLAMP_TO_EDGE
		gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_CLAMP_TO_EDGE, GL10.GL_REPEAT);
		gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_CLAMP_TO_EDGE, GL10.GL_REPEAT);
		
		//Use the Android GLUtils to specify a two-dimensional texture image from our bitmap
		GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, bitmap, 0);
		
		maxWidth = bitmap.getWidth();
		maxHeight = bitmap.getHeight();
		//Clean up
		bitmap.recycle();
		
		int [] params = new int [3];
		params[0] = textures[0];
		params[1] = maxHeight;
		params[2] = maxWidth;
		loaded.put(name, params);
	}
}
