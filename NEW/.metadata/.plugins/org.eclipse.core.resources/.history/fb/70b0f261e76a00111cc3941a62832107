package com.spacecombat;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class GameObject extends Component {

	private static List<GameObject> gameObjects = new ArrayList<GameObject>();
	private static Vector2 distances = new Vector2();
	
	
	private static GameObject xGameObject;
	private static int staticX = 0;
	private static int staticY = 0;

	private static int x = 0;
	private static int y = 0;

	public static void create(final GameObject gameObject) {
		GameObject.gameObjects.add(gameObject);
		// System.out.println("created " + gameObject.getName());
		gameObject.onCreate();
		gameObject.onStart();
	}

	public static void executeOnAllWithTags(final String[] search,
			final Function f) {
		for (staticX = 0; staticX < GameObject.gameObjects.size(); staticX++) {
			xGameObject = GameObject.gameObjects.get(staticX);
			if (xGameObject.hasTag(search)) {
				f.execute(xGameObject);
			}
		}
	}

	public static List<GameObject> findAllByName(final String search) {
		final LinkedList<GameObject> gos = new LinkedList<GameObject>();
		for (staticX = 0; staticX < GameObject.gameObjects.size(); staticX++) {
			if (GameObject.gameObjects.get(staticX).getName().equals(search)) {
				gos.add(GameObject.gameObjects.get(staticX));
			}
		}
		return gos;
	}

	public static List<GameObject> findAllByTags(final String[] search,
			final List<GameObject> gos) {
		gos.clear();

		float xMin = 800;
		float xMax = 0;
		float yMin = 800;
		float yMax = 0;

		for (staticX = 0; staticX < GameObject.gameObjects.size(); staticX++) {
			if (GameObject.gameObjects.get(staticX).hasTag(search)) {
				xMax = Math.max(
						GameObject.gameObjects.get(staticX).transform.position.x,
						xMax);
				xMin = Math.min(
						GameObject.gameObjects.get(staticX).transform.position.x,
						xMin);
				yMax = Math.max(
						GameObject.gameObjects.get(staticX).transform.position.y,
						yMax);
				yMin = Math.min(
						GameObject.gameObjects.get(staticX).transform.position.y,
						yMin);

				gos.add(GameObject.gameObjects.get(staticX));
			}
		}
		GameObject.distances.x = xMax - xMin;
		GameObject.distances.y = yMax - yMin;

		return gos;
	}

	public static GameObject findByName(final String search) {
		for (staticX = 0; staticX < GameObject.gameObjects.size(); staticX++) {
			if (GameObject.gameObjects.get(staticX).getName().equals(search)) {
				return GameObject.gameObjects.get(staticX);
			}
		}
		return null;
	}

	public static GameObject findRandomByTags(final String[] search) {
		final LinkedList<GameObject> gos = new LinkedList<GameObject>();
		for (staticX = 0; staticX < GameObject.gameObjects.size(); staticX++) {
			if (GameObject.gameObjects.get(staticX).hasTag(search)) {
				gos.add(GameObject.gameObjects.get(staticX));
			}
		}
		if (gos.size() == 0) {
			return null;
		}
		return gos.get(Util.randomNumber(0, gos.size() - 1));
	}

	public static List<GameObject> getAllGameObjects() {
		return GameObject.gameObjects;
	}

	public static Vector2 getDistances() {
		return GameObject.distances;
	}

	public Transform transform;

	private float destroyTimeStamp;

	//
	private RigidBody rigidBody;

	private String name = "GameObject";

	private String[] tags;

	private boolean isDestroyed = false;

	private boolean isDestroying = false;

	private final List<Component> components;

	public GameObject() {
		this.name = "GameObject";
		this.tags = new String[] {};
		this.transform = new Transform();
		this.components = new LinkedList<Component>();
	}

	public void addComponent(final Component c) {
		c.setGameObject(this);
		// System.out.println("Added:" + c.getClass().getSimpleName());
		this.components.add(c);
	}

	@Override
	public void collide(final Collision collision) {
		if (this.isDestroyed) {
			return;
		}

		for (x = 0; x < this.components.size(); x++) {
			this.components.get(x).collide(collision);
		}
	}

	@Override
	public void destroy() {
		for (x = 0; x < this.components.size(); x++) {
			this.components.get(x).onBeforeDestroy();
		}

		this.isDestroyed = true;
		// System.out.println("destroyed " + getName());
	}

	public void destroyAfter(final float time) {
		this.destroyTimeStamp = Time.getTime();

		this.destroyTimeStamp += time;
		this.isDestroying = true;
	}

	@Override
	public void draw() {
		if (this.isDestroyed) {
			return;
		}

		if (this.rigidBody != null) {
			this.rigidBody.draw();
		}

		for (x = 0; x < this.components.size(); x++) {
			if (this.components.get(x).isEnabled()) {
				this.components.get(x).draw();
			}
		}
	}

	public GraphicAnimation getAnimation(final String name) {
		for (x = 0; x < this.components.size(); x++) {
			if (this.components.get(x) instanceof GraphicAnimation) {
				if (((GraphicAnimation) this.components.get(x)).getName()
						.equals(name)) {
					return (GraphicAnimation) this.components.get(x);
				}
			}

		}
		return null;
	}

	public Component getComponent(final Class<? extends Component> getClass) {
		// String s = "";
		for (x = 0; x < this.components.size(); x++) {
			// s += c.getClass().getSimpleName() + ",";

			if (this.components.get(x).getClass() == getClass) {
				// System.out.println(getName() + " found " +
				// getClass.getSimpleName());
				return this.components.get(x);
			}
		}

		// System.out.println(getName() + " did not find " +
		// getClass.getSimpleName() + " in " + s);
		return null;
	}

	public GraphicAnimation getCurrentAnimation() {
		for (x = 0; x < this.components.size(); x++) {
			if (this.components.get(x) instanceof GraphicAnimation) {
				if (this.components.get(x).isEnabled()) {
					return (GraphicAnimation) this.components.get(x);
				}
			}
		}
		return null;
	}

	public String getName() {
		return this.name;
	}

	public String getPrintableTags() {
		String s = "";
		if (this.tags != null) {
			int x = 0;
			for (x = 0; x < this.tags.length; x++) {
				s += this.tags[x] + ",";
			}
		}
		return s;
	}

	public RigidBody getRigidBody() {
		return this.rigidBody;
	}

	public String[] getTags() {
		return this.tags;
	}

	public boolean hasTag(final String tag) {
		if (this.tags == null) {
			return false;
		}
		if (tag == null) {
			return false;
		}

		for (x = 0; x < this.tags.length; x++) {
			if (this.tags[x].equalsIgnoreCase(tag)) {
				return true;
			}
		}

		return false;
	}

	public boolean hasTag(final String[] otherTags) {
		if (this.tags == null) {
			return false;
		}
		if (otherTags == null) {
			return false;
		}

		for (x = 0; x < this.tags.length; x++) {
			for (y = 0; y < otherTags.length; y++) {
				if (this.tags[x].equalsIgnoreCase(otherTags[y])
						&& otherTags[y] != null) {
					return true;
				}
			}
		}

		return false;
	}

	public boolean isDestroyed() {
		return this.isDestroyed;
	}

	@Override
	public void onCreate() {
		if (this.rigidBody != null) {
			this.rigidBody.onCreate();
		}

		for (x = 0; x < this.components.size(); x++) {
			this.components.get(x).onCreate();
		}
	}

	@Override
	public void onStart() {
		if (this.rigidBody != null) {
			this.rigidBody.onStart();
		}

		for (x = 0; x < this.components.size(); x++) {
			this.components.get(x).onStart();
		}
	}

	public GraphicAnimation playAnimation(final String name) {
		GraphicAnimation animation = null;

		for (x = 0; x < this.components.size(); x++) {
			if (this.components.get(x) instanceof GraphicAnimation) {
				final GraphicAnimation gl = (GraphicAnimation) this.components
						.get(x);

				if (gl.getName().equals(name)) {
					System.out.println("Playing " + name);
					gl.setEnabled(true);
					animation = gl;
				} else {
					gl.setEnabled(false);
				}
			}
		}

		return animation;
	}

	public void removeComponent(final Class<? extends Component> getClass) {
		for (x = 0; x < this.components.size(); x++) {
			if (this.components.get(x).getClass() == getClass) {
				this.components.remove(this.components.get(x));
				return;
			}

		}
	}

	public void removeComponent(final Component c) {
		this.components.remove(c);
	}

	public void setName(final String name) {
		this.name = name;
	}

	public void setRigidBody(final RigidBody rigidBody) {
		// System.out.println("Created RigidBody:"+rigidBody);
		rigidBody.setGameObject(this);
		this.rigidBody = rigidBody;
		rigidBody.setGameObject(this);
	}

	public void setTags(final String[] tags) {
		this.tags = tags;
	}

	@Override
	public void update() {
		if (this.isDestroyed) {
			return;
		}

		// technically should happen somewhereElse
		if (this.rigidBody != null) {
			// System.out.println("Updating RigidBody");
			this.rigidBody.update();
		}

		for (x = 0; x < this.components.size(); x++) {
			
			if (this.components.get(x).isEnabled()) {
				// System.out.println("Updating:" +
				// c.getClass().getSimpleName());
				this.components.get(x).update();
			}
		}

		if (this.isDestroying) {
			if (this.destroyTimeStamp < Time.getTime()) {
				destroy();
			}
		}
	}

}
