package com.spacecombat.game;

import java.io.IOException;
import java.io.InputStream;
import java.util.List;

import android.content.Context;

import com.spacecombat.BoxCollider;
import com.spacecombat.Collider;
import com.spacecombat.Engine;
import com.spacecombat.FixedJoint;
import com.spacecombat.GameObject;
import com.spacecombat.Input;
import com.spacecombat.Level;
import com.spacecombat.R;
import com.spacecombat.RigidBody;
import com.spacecombat.Util;
import com.spacecombat.Vector2;

public class LevelLoader {

	private static Context context;

	public static InputStream getLevel (final String name)
	{
		//System.out.println("Loading " + name);
		if (name.equalsIgnoreCase("level0"))
		{
			return LevelLoader.context.getResources().openRawResource(R.raw.level0);
		}
		if (name.equalsIgnoreCase("level1"))
		{
			return LevelLoader.context.getResources().openRawResource(R.raw.level1);
		}
		if (name.equalsIgnoreCase("level2"))
		{
			return LevelLoader.context.getResources().openRawResource(R.raw.level2);
		}
		if (name.equalsIgnoreCase("level3"))
		{
			return LevelLoader.context.getResources().openRawResource(R.raw.level3);
		}
		if (name.equalsIgnoreCase("level4"))
		{
			return LevelLoader.context.getResources().openRawResource(R.raw.level4);
		}
		if (name.equalsIgnoreCase("level5"))
		{
			return LevelLoader.context.getResources().openRawResource(R.raw.level5);
		}
		if (name.equalsIgnoreCase("level6"))
		{
			return LevelLoader.context.getResources().openRawResource(R.raw.level6);
		}
		if (name.equalsIgnoreCase("level7"))
		{
			return LevelLoader.context.getResources().openRawResource(R.raw.level7);
		}
		if (name.equalsIgnoreCase("level8"))
		{
			return LevelLoader.context.getResources().openRawResource(R.raw.level8);
		}
		if (name.equalsIgnoreCase("level9"))
		{
			return LevelLoader.context.getResources().openRawResource(R.raw.level9);
		}
		if (name.equalsIgnoreCase("level10"))
		{
			return LevelLoader.context.getResources().openRawResource(R.raw.level10);
		}
		if (name.equalsIgnoreCase("level11"))
		{
			return LevelLoader.context.getResources().openRawResource(R.raw.level11);
		}
		if (name.equalsIgnoreCase("level12"))
		{
			return LevelLoader.context.getResources().openRawResource(R.raw.level12);
		}
		if (name.equalsIgnoreCase("level13"))
		{
			return LevelLoader.context.getResources().openRawResource(R.raw.level13);
		}

		//System.out.println("ERROR, NEED TO UPDATE LevelLoader.java WITH LEVEL NAME:" + name);
		return null;
	}

	private static String lastLevelLoaded = "";
	public static String getLastLevelLoaded ()
	{
		return lastLevelLoaded;
	}
	
	public static void loadLevel (final String name, final boolean clearAll) 
	{ //
		lastLevelLoaded = name;
		final List<GameObject> gos = GameObject.getAllGameObjects();
		for (int x = 0; x < gos.size(); x++)
		{
			if (gos.get(x).getDestroyOnLevelLoad() || clearAll)
			{
				gos.get(x).destroy(); 
				gos.get(x).release(); 
				gos.remove(x);
				x--; 
			}  
		}

		//System.out.println("-START-");
		for (final GameObject o : GameObject.getAllGameObjects())
		{
			//System.out.println(o.getName());
		}
		//System.out.println("------");


		final InputStream is = LevelLoader.getLevel(name);
		final java.io.InputStreamReader br = new java.io.InputStreamReader(is);

		final StringBuffer sb = new StringBuffer();


		GameObject level = null;
		while (true)
		{
			int ascii;

			try {
				ascii = br.read();
			} catch (final IOException e) {
				try {
					br.close();
				} catch (final IOException e1) {
					throw new RuntimeException(e1);
				}
				throw new RuntimeException(e);
			}

			if (ascii == -1)
			{
				break;
			}

			final char letter = (char)ascii;
			sb.append(letter);
		}

		final String file = sb.toString();
		final String[] lines = file.split("\\n");

		boolean ignoring = false;
		
		
		for (int x = 0; x < lines.length; x++)
		{
			if (ignoring)
			{
				if (lines[x].startsWith("*/"))
				{
					ignoring = false;
				}
				continue;
			}			
			if (lines[x].startsWith("//"))
			{
				continue;
			}			
			if (lines[x].startsWith("/*"))
			{
				ignoring = true;
				continue;
			}

			if (lines[x].startsWith("createLevel"))
			{
				x++;
				final String wadName = lines[x].trim();
				x++;
				final String smapWidth = lines[x].trim();
				x++;
				final String smapHeight = lines[x].trim();

				final int mapWidth = Integer.parseInt(smapWidth);
				final int mapHeight = Integer.parseInt(smapHeight);
				final int [] map = new int[mapWidth*mapHeight];

				for (int y = 0; y < mapHeight; y++)
				{
					x++;
					final String [] parts = lines[x].split(",");
					for (int z = 0; z < parts.length && z < mapWidth; z++)
					{
						map[y*mapWidth + z] = Integer.parseInt(parts[z].trim());
					}
					//System.out.println();
				}

				level = PrefabFactory.createLevel("level " + name, map, mapWidth, mapHeight, wadName);
				level.setDestroyOnLevelLoad(true);
				GameObject.create(level);
			}

			//AWESOME!
			//I found my old code, and i'm importing my levels!
			//WOOOT!!!
			if (lines[x].startsWith("create_enemy("))
			{
				String[] parts = lines[x].split(",");
				int time = Integer.parseInt(parts[0].substring("create_enemy(".length()).trim());
				int ship = Integer.parseInt(parts[1].trim());
				int script = Integer.parseInt(parts[2].trim());
				boolean sway = parts[3].trim().equals("yes");
				int L = Integer.parseInt(parts[4].trim());
				int R = Integer.parseInt(parts[5].trim());
				boolean special = parts[6].substring(parts[6].indexOf(")")).trim().equals("yes");
				 
				time *= 1;
				
				int spawnX = 64;
				int spawnY = 4148 - time;
				int enemyX = 64;
				int enemyY = 4148 - time - 32;
				
				int tile = 24;
				script++;
				
				boolean isReversed = sway;
				int scriptType = 0;
				int enemyType = ship;
				
				if (script == 1)
				{
					enemyX = Util.randomNumber(5,14)*tile;					
					scriptType = 3;
				}
				if (script == 2)
				{
					enemyX = 64;
					//top left, bounces left to right
					scriptType = 6;
					isReversed = false;
				}
				if (script == 3)
				{
					enemyX = 480-32;
					//top right, bounces right to left
					scriptType = 6;
					isReversed = true;
				}
				if (script == 4)
				{				
					//hugs left, 1/2 way down, moves to right, hugs right
					enemyX = 64;
					scriptType = 2;
					isReversed = false;
				}
				if (script == 5)
				{
					//hugs right, 1/2 way down, moves to left, hugs left
					enemyX = 480-32;
					scriptType = 2;
					isReversed = true;
				}
				if (script == 6)
				{
					//follows players X position
					enemyX = Util.randomNumber(5,14)*tile;
					scriptType = 5;
				}
				if (script == 7)
				{
					//suicide guy, tries to hit player
					enemyX = Util.randomNumber(5,14)*tile;
					scriptType = 4;
				}
				if (script == 8)
				{
					//script 1, but from bottom to top
					enemyX = Util.randomNumber(5,14)*tile;
					enemyY += 832;
					scriptType = 8;
				}
				if (script == 9)
				{
					//script 2, but from bottom to top
					enemyY += 832;
					scriptType = 9;
					isReversed = false;
				}
				if (script == 10)
				{
					//script 3, but from bottom to top
					enemyY += 832;
					scriptType = 9;
					isReversed = true;
				}
				if (script == 11)
				{
					//script 4, but from bottom to top
				}
				if (script == 12)
				{
					//script 5, but from bottom to top
				}
				
				final GameObject objectToCreate = PrefabFactory.createEnemy("enemy", new Vector2(enemyX,enemyY), enemyType, scriptType, isReversed);
				final GameObject spawner = PrefabFactory.createSpawner(spawnX, spawnY, objectToCreate);

				GameObject.create(spawner);
			}
			if (lines[x].startsWith("createEnemy"))
			{
				x++;
				final String sspawnX = lines[x].trim();
				final int spawnX = Integer.parseInt(sspawnX);
				x++;
				final String sspawnY = lines[x].trim();
				final int spawnY = Integer.parseInt(sspawnY);
				x++;
				final String senemyX = lines[x].trim();
				final int enemyX = Integer.parseInt(senemyX);
				x++;
				final String senemyY = lines[x].trim();
				final int enemyY = Integer.parseInt(senemyY);
				x++;
				final String senemyType = lines[x].trim();
				final int enemyType = Integer.parseInt(senemyType);
				x++;
				final String sscriptType = lines[x].trim();
				final int scriptType = Integer.parseInt(sscriptType);
				x++;
				final String sisReversed = lines[x].trim();
				final boolean isReversed = Boolean.parseBoolean(sisReversed);

				//System.out.println("CREATED ENEMY:" + new Vector2(enemyX,enemyY) + " " + enemyType + " " + scriptType + " " + isReversed);

				final GameObject objectToCreate = PrefabFactory.createEnemy("enemy", new Vector2(enemyX,enemyY), enemyType, scriptType, isReversed);
				final GameObject spawner = PrefabFactory.createSpawner(spawnX, spawnY, objectToCreate);

				GameObject.create(spawner);
			}

			if (lines[x].startsWith("createPowerUp"))
			{
				x++;
				final int spawnX = Integer.parseInt(lines[x].trim());
				x++;
				final int spawnY = Integer.parseInt(lines[x].trim());
				x++;
				final int powerupX = Integer.parseInt(lines[x].trim());
				x++;
				final int powerupY = Integer.parseInt(lines[x].trim());
				x++;
				final int powerupType = Integer.parseInt(lines[x].trim());
				x++;
				final boolean canChange = Boolean.parseBoolean(lines[x].trim());

				//System.out.println("CREATED POWER UP:" + new Vector2(powerupX,powerupY) + " " + powerupType + " " + " " + canChange);

				final GameObject objectToCreate = PrefabFactory.createPowerUp(new Vector2(powerupX,powerupY), powerupType, canChange);
				final GameObject spawner = PrefabFactory.createSpawner(spawnX, spawnY, objectToCreate);

				GameObject.create(spawner);
			}
			//
			if (lines[x].startsWith("createAlly"))
			{
				x++;
				final int spawnX = Integer.parseInt(lines[x].trim());
				x++;
				final int spawnY = Integer.parseInt(lines[x].trim());
				x++;
				final int allyX = Integer.parseInt(lines[x].trim());
				x++;
				final int allyY = Integer.parseInt(lines[x].trim());
				x++;
				final String allyType = lines[x].trim();
				x++;
				final String weapon = lines[x].trim();

				//System.out.println("CREATED ALLY:" + new Vector2(allyX,allyY) + " " + allyType + " " + " " + weapon);

				final GameObject objectToCreate = PrefabFactory.createAlly("Ally - " + allyType, new Vector2(allyX, allyY), allyType, weapon);
				final GameObject spawner = PrefabFactory.createSpawner(spawnX, spawnY, objectToCreate);

				GameObject.create(spawner);
			}

			if (lines[x].startsWith("createPlayer"))
			{
				x++;
				final int spawnX = Integer.parseInt(lines[x].trim());
				x++;
				final int spawnY = Integer.parseInt(lines[x].trim());
				x++;
				final int playerX = Integer.parseInt(lines[x].trim());
				x++;
				final int playerY = Integer.parseInt(lines[x].trim());
				x++;
				final String playerType = lines[x].trim();

				//System.out.println("CREATED PLAYER:" + new Vector2(playerX,playerY) + " " + playerType + " ");
				
				//IF PLAYER ALREADY EXISTS, JUST MOVE HIM TO LOCATION!
				GameObject alreadyExists = GameObject.findByName("player");
				GameObject alreadyExistsCam = GameObject.findByName("Camera");
				if (alreadyExists == null)
				{
					final GameObject objectToCreate = PrefabFactory.createPlayer("player", new Vector2(playerX,playerY), playerType);
					objectToCreate.setDestroyOnLevelLoad(false);
					final GameObject spawner = PrefabFactory.createSpawner(spawnX, spawnY, objectToCreate);

					GameObject.create(spawner);

					GameObject top = PrefabFactory.createTopOfScreen();
					GameObject.create(top);

					GameObject cam = PrefabFactory.createCamera("Camera", new Vector2(spawnX,spawnY), objectToCreate);
					cam.setDestroyOnLevelLoad(false);
					GameObject hud = PrefabFactory.createHUD(cam,objectToCreate);
					GameObject.create(hud);
					
					hud.setDestroyOnLevelLoad(false);

					hud.transform.position.x = cam.transform.position.x + 16;
					hud.transform.position.y = cam.transform.position.y + 16;

					top.transform.position.x = cam.transform.position.x;
					top.transform.position.y = cam.transform.position.y;
					top.setDestroyOnLevelLoad(false);

					GameObject.create(cam);
				}
				else
				{
					alreadyExistsCam.transform.position.x = spawnX;
					alreadyExistsCam.transform.position.y = spawnY;
					alreadyExists.transform.position.x = playerX;
					alreadyExists.transform.position.y = playerY;
				}
			}

			if (lines[x].startsWith("loadLevelOnCollision"))
			{
				x++;
				final String nextLevel = lines[x].trim();
				x++;
				final int spawnX = Integer.parseInt(lines[x].trim());
				x++;
				final int spawnY = Integer.parseInt(lines[x].trim());

				final LoadLevelOnCollision lloc = new LoadLevelOnCollision(nextLevel);
				//final FixedJoint fj = new FixedJoint(level);

				final GameObject spawner = new GameObject();
				final RigidBody r = new RigidBody();
				final Collider c = new BoxCollider(new Vector2(800,32));
				r.setCollider(c);
				spawner.setRigidBody(r);				
				spawner.transform.position.x = spawnX;
				spawner.transform.position.y = spawnY;
				spawner.addComponent(lloc);				
				//spawner.addComponent(fj);
				GameObject.create(spawner);
				//System.out.println("CREATED LEVEL LOADER:" + new Vector2(spawnX,spawnY) + " " + nextLevel);
			}
		}

		//System.out.println("-END-");
		for (final GameObject o : GameObject.getAllGameObjects())
		{
			//System.out.println(o.getName());
		}
		//System.out.println("------");

		try {
			br.close();
		} catch (final IOException e) {
			throw new RuntimeException(e);
		}
	}

	public static void setContext (final Context c)
	{
		LevelLoader.context = c;
	}
}
