package com.spacecombat.game;

import java.io.IOException;
import java.io.InputStream;
import java.io.BufferedInputStream;
import android.content.Context;

import com.spacecombat.BoxCollider;
import com.spacecombat.Collider;
import com.spacecombat.FixedJoint;
import com.spacecombat.GameObject;
import com.spacecombat.R;
import com.spacecombat.R.raw;
import com.spacecombat.RigidBody;
import com.spacecombat.Vector2;

public class LevelLoader {
	
	private static Context context;
	
	public static void setContext (Context c)
	{
		LevelLoader.context = c;
	}
	
	public static void loadLevel (String name)
	{
		GameObject.create(PrefabFactory.createTopOfScreen());
		InputStream is = getLevel(name);
		java.io.InputStreamReader br = new java.io.InputStreamReader(is);

		StringBuffer sb = new StringBuffer();

		GameObject level = null;
		while (true)
		{
			int ascii;
			
			try {
				ascii = br.read();
			} catch (IOException e) {
				throw new RuntimeException(e);
			}
			
			if (ascii == -1)
			{
				break;
			}

			char letter = (char)ascii;
			sb.append(letter);
		}

		String file = sb.toString();
		String[] lines = file.split("\\n");
		
		for (int x = 0; x < lines.length; x++)
		{
			if (lines[x].startsWith("createLevel"))
			{
				x++;
				String wadName = lines[x].trim();
				x++;
				String smapWidth = lines[x].trim();
				x++;
				String smapHeight = lines[x].trim();
				
				int mapWidth = Integer.parseInt(smapWidth);
				int mapHeight = Integer.parseInt(smapHeight);
				int [] map = new int[mapWidth*mapHeight];

				for (int y = 0; y < mapHeight; y++)
				{
					x++;
					String [] parts = lines[x].split(",");
					for (int z = 0; z < parts.length && z < mapWidth; z++)
					{
						map[y*mapWidth + z] = Integer.parseInt(parts[z].trim());
					}
					System.out.println();
				}
				
				level = PrefabFactory.createLevel(map, mapWidth, mapHeight, wadName);
				GameObject.create(level);

				GameObject.create(PrefabFactory.createPlayer("Player1", new Vector2(200, 600), "hunter"));
/*
				GameObject.create(PrefabFactory.createAlly("Ally1", new Vector2(400,
						700), "sentinel", "laser"));
				GameObject.create(PrefabFactory.createAlly("Ally2",
						new Vector2(0, 700), "pariah", "machinegun"));
				GameObject.create(PrefabFactory.createAlly("Ally3", new Vector2(400,
						500), "renegade", "flamethrower"));
				GameObject.create(PrefabFactory.createAlly("Ally4",
						new Vector2(0, 500), "calumniator", "pulsecannon"));
						*/
				//GameObject.create(PrefabFactory.createRandomLevel());
			}
			if (lines[x].startsWith("createEnemy"))
			{
				x++;
				String sspawnX = lines[x].trim();
				int spawnX = Integer.parseInt(sspawnX);
				x++;
				String sspawnY = lines[x].trim();
				int spawnY = Integer.parseInt(sspawnY);
				x++;
				String senemyX = lines[x].trim();
				int enemyX = Integer.parseInt(senemyX);
				x++;
				String senemyY = lines[x].trim();
				int enemyY = Integer.parseInt(senemyY);
				x++;
				String senemyType = lines[x].trim();
				int enemyType = Integer.parseInt(senemyType);
				x++;
				String sscriptType = lines[x].trim();
				int scriptType = Integer.parseInt(sscriptType);
				x++;
				String sisReversed = lines[x].trim();
				int sisReversed = Integer.parseInt(sisReversed);
				
				GameObject o = PrefabFactory.createEnemy("enemy", new Vector2(32,32), 4, 0, false);
				
				GameObject spawner = new GameObject();
				RigidBody r = new RigidBody();
				Collider c = new BoxCollider(new Vector2(800,32));
				r.setCollider(c);
				spawner.setRigidBody(r);
				spawner.addComponent(new SpawnOnCollision(o));
				spawner.addComponent(new FixedJoint(level));
				spawner.transform.position.x = 0;
				spawner.transform.position.y = -1000;
								
				GameObject.create(spawner);
			}
		}		
	}
	
	private static Vector2 Vector2(int i, int j) {
		// TODO Auto-generated method stub
		return null;
	}

	public static InputStream getLevel (String name)
	{
		if (name.equalsIgnoreCase("level1"))
		{
			System.out.println("Loading level1");
			return LevelLoader.context.getResources().openRawResource(R.raw.level1);
		}
		
		System.out.println("ERROR");
		return null;
	}
}
